@using TouristWebSite.Models
@model ConstructViewModel

<h2>Конструктор туру</h2>
@Html.AntiForgeryToken()
<h4>Сконструюйте унікальний тур для себе, обираючи його характеристики.</h4>
<hr />

@Html.HiddenFor(m => m.Type, new { @id = "Type" })
@Html.HiddenFor(m => m.Country, new { @id = "CountryHint" })
@Html.HiddenFor(m => m.City, new { @id = "CityHint" })
@Html.HiddenFor(m => m.LeavePoint, new { @id = "LeavePointHint" })
@Html.HiddenFor(m => m.DestinationCountry, new { @id = "DestinationCountryHint" })
@Html.HiddenFor(m => m.DestinationCity, new { @id = "DestinationCityHint" })
@Html.HiddenFor(m => m.DestinationPoint, new { @id = "DestinationPointHint" })
@Html.HiddenFor(m => m.Route, new { @id = "RouteHint" })
@Html.HiddenFor(m => m.Hotel, new { @id = "HotelHint" })
@Html.HiddenFor(m => m.BackRoute, new { @id = "BackRouteHint" })
@Html.HiddenFor(m => m.ExcursionsCount, new { @id = "ExcursionsCountHint" })
@Html.HiddenFor(m => m.Excursion1, new { @id = "Excursion1Hint" })
@Html.HiddenFor(m => m.Excursion2, new { @id = "Excursion2Hint" })
@Html.HiddenFor(m => m.Excursion3, new { @id = "Excursion3Hint" })
@Html.HiddenFor(m => m.Excursion4, new { @id = "Excursion4Hint" })
@Html.HiddenFor(m => m.Excursion5, new { @id = "Excursion5Hint" })

<h4>Точка відправлення:</h4>
@using (Html.BeginForm("TourConstruct", "Helper", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.Country, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Country, new SelectList(
                Model.Countries.Select(x => new { Value = x.Id, Text = x.Name }),
                "Value",
                "Text"
                ),
                new { @class = "form-control", @Id = "countryList" })
            @Html.ValidationMessageFor(m => m.Country, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.City, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.City, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "cityList" })
            @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Transport, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Transport, new SelectList(
                Model.Transports.Select(x => new { Value = x.Id, Text = x.Name }),
                "Value",
                "Text"
                ),
                new { @class = "form-control", @Id = "transportList" })
            @Html.ValidationMessageFor(m => m.Transport, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.LeavePoint, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.LeavePoint, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "pointsList" })
            @Html.ValidationMessageFor(m => m.LeavePoint, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h4>Пункт призначення:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.DestinationCountry, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.DestinationCountry, new SelectList(
                Model.DestinationCountries.Select(x => new { Value = x.Id, Text = x.Name }),
                "Value",
                "Text"
                ),
                new { @class = "form-control", @Id = "destinationCountryList" })
            @Html.ValidationMessageFor(m => m.DestinationCountry, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.DestinationCity, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.DestinationCity, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "destinationCityList" })
            @Html.ValidationMessageFor(m => m.DestinationCity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.DestinationPoint, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.DestinationPoint, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "destinationPointsList" })
            @Html.ValidationMessageFor(m => m.DestinationPoint, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h4>Маршрут подорожі:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.Route, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Route, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "routesList" })
            @Html.ValidationMessageFor(m => m.Route, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Class, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Class, new SelectList(new string[] { "Економ", "Бізнес" }), new { @class = "form-control", @id = "routeClass" })
            @Html.ValidationMessageFor(m => m.Class, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h4>Готель:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.Hotel, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Hotel, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "hotelsList" })
            @Html.ValidationMessageFor(m => m.Hotel, "", new { @class = "text-danger" })
            <a id="hotelLink" href="@Model.HotelLink">Детальніше...</a>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.PeopleCount, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.PeopleCount, new { @class = "form-control", @type = "number", @id = "PeopleCount" })
            @Html.ValidationMessageFor(m => m.PeopleCount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.HotelClass, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.HotelClass, new SelectList(new string[] { "Стандарт", "Люкс" }), new { @class = "form-control", @id = "hotelClass" })
            @Html.ValidationMessageFor(m => m.HotelClass, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ExcursionsCount, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.ExcursionsCount, new { @class = "form-control", @type = "number", @oninput = "onchangeevent();", @id = "ExcursionsCount" })
            @Html.ValidationMessageFor(m => m.ExcursionsCount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="excurs1" style="display: none">
        @Html.LabelFor(m => m.Excursion1, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion1, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList1" })
            @Html.ValidationMessageFor(m => m.Excursion1, "", new { @class = "text-danger" })
            <a id="link1" href="@Model.Excursion1Link">Детальніше...</a>
        </div>
    </div>

    <div class="form-group" id="excurs2" style="display: none">
        @Html.LabelFor(m => m.Excursion2, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion2, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList2" })
            @Html.ValidationMessageFor(m => m.Excursion2, "", new { @class = "text-danger" })
            <a id="link2" href="@Model.Excursion2Link">Детальніше...</a>
        </div>
    </div>

    <div class="form-group" id="excurs3" style="display: none">
        @Html.LabelFor(m => m.Excursion3, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion3, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList3" })
            @Html.ValidationMessageFor(m => m.Excursion3, "", new { @class = "text-danger" })
            <a id="link3" href="@Model.Excursion3Link">Детальніше...</a>
        </div>
    </div>

    <div class="form-group" id="excurs4" style="display: none">
        @Html.LabelFor(m => m.Excursion4, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion4, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList4" })
            @Html.ValidationMessageFor(m => m.Excursion4, "", new { @class = "text-danger" })
            <a id="link4" href="@Model.Excursion4Link">Детальніше...</a>
        </div>
    </div>

    <div class="form-group" id="excurs5" style="display: none">
        @Html.LabelFor(m => m.Excursion5, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion5, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList5" })
            @Html.ValidationMessageFor(m => m.Excursion5, "", new { @class = "text-danger" })
            <a id="link5" href="@Model.Excursion5Link">Детальніше...</a>
        </div>
    </div>

    <hr />
    <h4>Маршрут зворотньої подорожі:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.BackRoute, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.BackRoute, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "backRoutesList" })
            @Html.ValidationMessageFor(m => m.BackRoute, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.BackClass, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.BackClass, new SelectList(new string[] { "Економ", "Бізнес" }), new { @class = "form-control", @id = "backRouteClass" })
            @Html.ValidationMessageFor(m => m.BackClass, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.AdditionalInfo, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.TextAreaFor(m => m.AdditionalInfo, new { @class = "form-control", @style = "min-height: 150px" })
        </div>
    </div>

    <div class="form-group">
        <label class="col-md-offset-2 col-md-9" id="PriceCount">Вартість туру на обрану кількість людей:  грн.</label>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-9">
            <button type="submit" class="btn btn-success" id="constructButton" title="Сконструювати унікальний тур"> <i class="fas fa-check"></i> Сконструювати </button>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var urlcities = '@Url.Action("GetCities", "Helper")';
        var urlpoints = '@Url.Action("GetLeavePoints", "Helper")';
        var urldestinationcities = '@Url.Action("GetDestinationCities", "Helper")';
        var urldestinationpoints = '@Url.Action("GetDestinationPoints", "Helper")';
        var urlroutes = '@Url.Action("GetRoutes", "Helper")';
        var urlhotels = '@Url.Action("GetHotels", "Helper")';
        var urlexcursions = '@Url.Action("GetExcursions", "Helper")';
        var urlbackroutes = '@Url.Action("GetBackRoutes", "Helper")';
        var urlprice = '@Url.Action("GetPrice", "Helper")';
        var urllink = '@Url.Action("GetLink", "Helper")';
        var hotellink = '@Url.Action("GetHotelLink", "Helper")';

        var cities = $('#cityList');
        var points = $('#pointsList');
        var destinationcities = $('#destinationCityList');
        var destinationpoints = $('#destinationPointsList');
        var routes = $('#routesList');
        var hotels = $('#hotelsList');
        var excursions1 = $('#excursionsList1');
        var excursions2 = $('#excursionsList2');
        var excursions3 = $('#excursionsList3');
        var excursions4 = $('#excursionsList4');
        var excursions5 = $('#excursionsList5');
        var backroutes = $('#backRoutesList');

        async function fetchCities(CountryHint, CityHint) {
            cities.empty();
            if (CountryHint == null) {
                return;
            }

            await $.getJSON(urlcities,
                { CountryHint: CountryHint, CityHint: CityHint },
                function(response) {
                    $.each(response,
                        function(index, item) {
                            cities.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        }

        async function fetchPoints(cityId, transportId, LeavePointHint) {
            points.empty();
            if (cityId == null || transportId == null) {
                return;
            }

            await $.getJSON(urlpoints,
                { cityId: cityId, transportId: transportId, LeavePointHint: LeavePointHint },
                function(response) {
                    $.each(response,
                        function(index, item) {
                            points.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        }

        async function fetchDestinationCities(id, DestinationCityHint) {
            destinationcities.empty();
            if (id == null) {
                return;
            }

            await $.getJSON(urldestinationcities,
                { id: id, DestinationCityHint: DestinationCityHint },
                function(response) {
                    $.each(response,
                        function(index, item) {
                            destinationcities.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        }

        async function fetchDestinationPoints(cityId, transportId, DestinationPointHint) {
            destinationpoints.empty();
            if (cityId == null || transportId == null) {
                return;
            }

            await $.getJSON(urldestinationpoints,
                { cityId: cityId, transportId: transportId, DestinationPointHint: DestinationPointHint },
                function(response) {
                    $.each(response,
                        function(index, item) {
                            destinationpoints.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        };

        async function fetchRoutes(leavePointId, destinationPointId, RouteHint) {
            routes.empty();
            if (leavePointId == null || destinationPointId == null) {
                return;
            }

            await $.getJSON(urlroutes,
                { leavePointId: leavePointId, destinationPointId: destinationPointId, RouteHint: RouteHint },
                function(response) {
                    $.each(response,
                        function(index, item) {
                            routes.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        };

        async function fetchHotels(destinationCityId, HotelHint) {
            hotels.empty();
            if (destinationCityId == null) {
                return;
            }

            await $.getJSON(urlhotels,
                { destinationCityId: destinationCityId, HotelHint: HotelHint },
                function (response) {
                    document.getElementById("hotelLink").href = response[0].Link;
                    $.each(response,
                        function(index, item) {
                            hotels.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        }

        async function fetchExcursions(hotelId) {
            excursions1.empty();
            excursions2.empty();
            excursions3.empty();
            excursions4.empty();
            excursions5.empty();
            if (hotelId == null) {
                return;
            }

            await $.getJSON(urlexcursions,
                { hotelId: hotelId, ExcursionHint: 0 },
                function (response) {

                    document.getElementById("link1").href = response[0].Link;
                    document.getElementById("link2").href = response[0].Link;
                    document.getElementById("link3").href = response[0].Link;
                    document.getElementById("link4").href = response[0].Link;
                    document.getElementById("link5").href = response[0].Link;

                    $.each(response,
                        function(index, item) {
                            excursions1.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });

                    $.each(response,
                        function(index, item) {
                            excursions2.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });

                    $.each(response,
                        function(index, item) {
                            excursions3.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });

                    $.each(response,
                        function(index, item) {
                            excursions4.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });

                    $.each(response,
                        function(index, item) {
                            excursions5.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        }

        async function fetchBackRoutes(leavePointId, destinationPointId, BackRouteHint) {
            backroutes.empty();
            if (leavePointId == null || destinationPointId == null) {
                return;
            }

            await $.getJSON(urlbackroutes,
                { leavePointId: leavePointId, destinationPointId: destinationPointId, BackRouteHint: BackRouteHint },
                function(response) {
                    $.each(response,
                        function(index, item) {
                            backroutes.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                        });
                });
        }

        async function fetchPrice(routeId,
            isBusiness,
            backRouteId,
            isBackBusiness,
            hotelId,
            isLux,
            ex1,
            ex2,
            ex3,
            ex4,
            ex5,
            peopleCount) {
            if (routeId == null || backRouteId == null || hotelId == null) {
                document.getElementById("PriceCount").innerHTML =
                    "Унікальний тур із заданими параметрами не може бути сконструйовано.";
                document.getElementById("constructButton").disabled = true;
                return;
            }

            await $.getJSON(urlprice,
                {
                    routeId: routeId,
                    isBusiness: isBusiness,
                    backRouteId: backRouteId,
                    isBackBusiness: isBackBusiness,
                    hotelId: hotelId,
                    isLux: isLux,
                    ex1: ex1,
                    ex2: ex2,
                    ex3: ex3,
                    ex4: ex4,
                    ex5: ex5,
                    peopleCount: peopleCount
                },
                function(response) {
                    document.getElementById("PriceCount").innerHTML =
                        "Вартість унікального туру на обрану кількість людей: " + response + " грн.";
                    document.getElementById("constructButton").disabled = false;
                });
        }

        async function onchangeevent() {
            var count = document.getElementById("ExcursionsCount").value;
            switch (Number(count)) {
            case 0:
                document.getElementById("excurs1").style.display = "none";
                document.getElementById("excurs2").style.display = "none";
                document.getElementById("excurs3").style.display = "none";
                document.getElementById("excurs4").style.display = "none";
                document.getElementById("excurs5").style.display = "none";
                break;
            case 1:
                document.getElementById("excurs1").style.display = "block";
                document.getElementById("excurs2").style.display = "none";
                document.getElementById("excurs3").style.display = "none";
                document.getElementById("excurs4").style.display = "none";
                document.getElementById("excurs5").style.display = "none";
                break;
            case 2:
                document.getElementById("excurs1").style.display = "block";
                document.getElementById("excurs2").style.display = "block";
                document.getElementById("excurs3").style.display = "none";
                document.getElementById("excurs4").style.display = "none";
                document.getElementById("excurs5").style.display = "none";
                break;
            case 3:
                document.getElementById("excurs1").style.display = "block";
                document.getElementById("excurs2").style.display = "block";
                document.getElementById("excurs3").style.display = "block";
                document.getElementById("excurs4").style.display = "none";
                document.getElementById("excurs5").style.display = "none";
                break;
            case 4:
                document.getElementById("excurs1").style.display = "block";
                document.getElementById("excurs2").style.display = "block";
                document.getElementById("excurs3").style.display = "block";
                document.getElementById("excurs4").style.display = "block";
                document.getElementById("excurs5").style.display = "none";
                break;
            case 5:
                document.getElementById("excurs1").style.display = "block";
                document.getElementById("excurs2").style.display = "block";
                document.getElementById("excurs3").style.display = "block";
                document.getElementById("excurs4").style.display = "block";
                document.getElementById("excurs5").style.display = "block";
                break;
            default:
            }
            await countPrice();
        }

        async function countPrice() {
            var idRouteClass = $("#routeClass").prop('selectedIndex');
            var isBusiness = false;
            if (idRouteClass == 1) {
                isBusiness = true;
            }
            var idBackRouteClass = $("#backRouteClass").prop('selectedIndex');
            var isBackBusiness = false;
            if (idBackRouteClass == 1) {
                isBackBusiness = true;
            }
            var idHotelClass = $("#hotelClass").prop('selectedIndex');
            var isLux = false;
            if (idHotelClass == 1) {
                isLux = true;
            }
            var ex1 = 0;
            var ex2 = 0;
            var ex3 = 0;
            var ex4 = 0;
            var ex5 = 0;
            var count = document.getElementById("ExcursionsCount").value;
            switch (Number(count)) {
            case 0:

                break;
            case 1:
                ex1 = $("#excursionsList1").val();
                break;
            case 2:
                ex1 = $("#excursionsList1").val();
                ex2 = $("#excursionsList2").val();
                break;
            case 3:
                ex1 = $("#excursionsList1").val();
                ex2 = $("#excursionsList2").val();
                ex3 = $("#excursionsList3").val();
                break;
            case 4:
                ex1 = $("#excursionsList1").val();
                ex2 = $("#excursionsList2").val();
                ex3 = $("#excursionsList3").val();
                ex4 = $("#excursionsList4").val();
                break;
            case 5:
                ex1 = $("#excursionsList1").val();
                ex2 = $("#excursionsList2").val();
                ex3 = $("#excursionsList3").val();
                ex4 = $("#excursionsList4").val();
                ex5 = $("#excursionsList5").val();
                break;
            default:
            }

            await fetchPrice($("#routesList").val(),
                isBusiness,
                $("#backRoutesList").val(),
                isBackBusiness,
                $("#hotelsList").val(),
                isLux,
                ex1,
                ex2,
                ex3,
                ex4,
                ex5,
                $("#PeopleCount").val());
        }

        $(document).ready(async function() {

            $("#countryList").change(async function() {
                var id = $(this).val();
                await fetchCities(id, 0);
                var idcity = $("#cityList").val();
                var idtransport = $("#transportList").val();
                await fetchPoints(idcity, idtransport, 0);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint, 0);
                await fetchBackRoutes(idPoint, idDestinationPoint, 0);
                await countPrice();
            });

            $("#cityList").change(async function() {
                var id = $(this).val();
                var idtransport = $("#transportList").val();
                await fetchPoints(id, idtransport, 0);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint, 0);
                await fetchBackRoutes(idPoint, idDestinationPoint, 0);
                await countPrice();
            });

            $("#transportList").change(async function() {
                var id = $(this).val();
                var idcity = $("#cityList").val();
                await fetchPoints(idcity, id, 0);
                var idcitydest = $("#destinationCityList").val();
                await fetchDestinationPoints(idcitydest, id, 0);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint, 0);
                await fetchBackRoutes(idPoint, idDestinationPoint, 0);
                await countPrice();
            });

            $("#destinationCountryList").change(async function() {
                var id = $(this).val();
                await fetchDestinationCities(id, 0);
                var idcity = $("#destinationCityList").val();
                var idtransport = $("#transportList").val();
                await fetchDestinationPoints(idcity, idtransport, 0);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint, 0);
                await fetchBackRoutes(idPoint, idDestinationPoint, 0);
                await fetchHotels(idcity, 0);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);
                await countPrice();
            });

            $("#destinationCityList").change(async function() {
                var id = $(this).val();
                var idtransport = $("#transportList").val();
                await fetchDestinationPoints(id, idtransport, 0);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint, 0);
                await fetchBackRoutes(idPoint, idDestinationPoint, 0);
                await fetchHotels(id, 0);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);
                await countPrice();
            });

            $("#pointsList").change(async function() {
                var id = $(this).val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(id, idDestinationPoint, 0);
                await fetchBackRoutes(id, idDestinationPoint, 0);
                await countPrice();
            });

            $("#destinationPointsList").change(async function() {
                var id = $(this).val();
                var idPoint = $("#pointsList").val();
                await fetchRoutes(idPoint, id, 0);
                await fetchBackRoutes(idPoint, id, 0);
                await countPrice();
            });

            $("#hotelsList").change(async function() {
                var id = $(this).val();
                await fetchExcursions(id);

                await $.getJSON(hotellink,
                    {
                        hotelId: document.getElementById("hotelsList").value
                    },
                    function (response) {
                        document.getElementById("hotelLink").href = response.Link;
                    });

                await countPrice();
            });

            $("#routesList").change(async function() {
                await countPrice();
            });

            $("#backRoutesList").change(async function() {
                await countPrice();
            });

            $("#routeClass").change(async function() {
                await countPrice();
            });

            $("#backRouteClass").change(async function() {
                await countPrice();
            });

            $("#hotelClass").change(async function () {
                await countPrice();
            });

            $("#excursionsList1").change(async function () {

                await $.getJSON(urllink,
                    {
                        excursionId: document.getElementById("excursionsList1").value
                    },
                    function (response) {
                        document.getElementById("link1").href = response.Link;
                    });

                await countPrice();
            });

            $("#excursionsList2").change(async function () {
                
                await $.getJSON(urllink,
                    {
                        excursionId: document.getElementById("excursionsList2").value
                    },
                    function (response) {
                        document.getElementById("link2").href = response.Link;
                    });

                await countPrice();
            });

            $("#excursionsList3").change(async function () {

                await $.getJSON(urllink,
                    {
                        excursionId: document.getElementById("excursionsList3").value
                    },
                    function (response) {
                        document.getElementById("link3").href = response.Link;
                    });

                await countPrice();
            });

            $("#excursionsList4").change(async function () {
                await $.getJSON(urllink,
                    {
                        excursionId: document.getElementById("excursionsList4").value
                    },
                    function (response) {
                        document.getElementById("link4").href = response.Link;
                    });

                await countPrice();
            });

            $("#excursionsList5").change(async function () {
                await $.getJSON(urllink,
                    {
                        excursionId: document.getElementById("excursionsList5").value
                    },
                    function (response) {
                        document.getElementById("link5").href = response.Link;
                    });

                await countPrice();
            });

            $("#PeopleCount").change(async function() {
                await countPrice();
            });

            var Type = $("#Type").val();
            if (Type === "Recommended") {
                var CountryHint = $("#CountryHint").val();
                var CityHint = $("#CityHint").val();
                await fetchCities(CountryHint, CityHint);
                var LeavePointHint = $("#LeavePointHint").val();
                await fetchPoints($("#cityList").val(), $("#transportList").val(), LeavePointHint);
                var DestinationCountryHint = $("#DestinationCountryHint").val();
                var DestinationCityHint = $("#DestinationCityHint").val();
                await fetchDestinationCities(DestinationCountryHint, DestinationCityHint);
                var DestinationPointHint = $("#DestinationPointHint").val();
                await fetchDestinationPoints($("#destinationCityList").val(),
                    $("#transportList").val(),
                    DestinationPointHint);
                var RouteHint = $("#RouteHint").val();
                await fetchRoutes($("#pointsList").val(), $("#destinationPointsList").val(), RouteHint);
                var HotelHint = $("#HotelHint").val();
                await fetchHotels($("#destinationCityList").val(), HotelHint);
                var BackRouteHint = $("#BackRouteHint").val();
                await fetchBackRoutes($("#pointsList").val(), $("#destinationPointsList").val(), BackRouteHint);

                var ExcursionsCountHint = $("#ExcursionsCountHint").val();
                var Excursion1Hint = $("#Excursion1Hint").val();
                var Excursion2Hint = $("#Excursion2Hint").val();
                var Excursion3Hint = $("#Excursion3Hint").val();
                var Excursion4Hint = $("#Excursion4Hint").val();
                var Excursion5Hint = $("#Excursion5Hint").val();

                if (ExcursionsCountHint == 0) {
                    await fetchExcursions($("#hotelsList").val());
                }
                else {

                    onchangeevent();

                    if (HotelHint == null) {
                        return;
                    }

                    if (ExcursionsCountHint > 0) {
                        excursions1.empty();
                        await $.getJSON(urlexcursions,
                            { hotelId: HotelHint, ExcursionHint: Excursion1Hint },
                            function(response) {
                                $.each(response,
                                    function(index, item) {
                                        excursions1.append($('<option value="' +
                                            item.Id +
                                            '">' +
                                            item.Name +
                                            '</option>'));
                                    });
                            });
                    };

                    if (ExcursionsCountHint > 1) {
                        excursions2.empty();
                        await $.getJSON(urlexcursions,
                            { hotelId: HotelHint, ExcursionHint: Excursion2Hint },
                            function (response) {
                                $.each(response,
                                    function (index, item) {
                                        excursions2.append($('<option value="' +
                                            item.Id +
                                            '">' +
                                            item.Name +
                                            '</option>'));
                                    });
                            });
                    };

                    if (ExcursionsCountHint > 2) {
                        excursions3.empty();
                        await $.getJSON(urlexcursions,
                            { hotelId: HotelHint, ExcursionHint: Excursion3Hint },
                            function (response) {
                                $.each(response,
                                    function (index, item) {
                                        excursions3.append($('<option value="' +
                                            item.Id +
                                            '">' +
                                            item.Name +
                                            '</option>'));
                                    });
                            });
                    };

                    if (ExcursionsCountHint > 3) {
                        excursions4.empty();
                        await $.getJSON(urlexcursions,
                            { hotelId: HotelHint, ExcursionHint: Excursion4Hint },
                            function (response) {
                                $.each(response,
                                    function (index, item) {
                                        excursions4.append($('<option value="' +
                                            item.Id +
                                            '">' +
                                            item.Name +
                                            '</option>'));
                                    });
                            });
                    };

                    if (ExcursionsCountHint > 4) {
                        excursions5.empty();
                        await $.getJSON(urlexcursions,
                            { hotelId: HotelHint, ExcursionHint: Excursion5Hint },
                            function (response) {
                                $.each(response,
                                    function (index, item) {
                                        excursions5.append($('<option value="' +
                                            item.Id +
                                            '">' +
                                            item.Name +
                                            '</option>'));
                                    });
                            });
                    };
                }

                countPrice();

            } else {
                await fetchCities($("#countryList").val(), 0);
                await fetchPoints($("#cityList").val(), $("#transportList").val(), 0);
                await fetchDestinationCities($("#destinationCountryList").val(), 0);
                await fetchDestinationPoints($("#destinationCityList").val(), $("#transportList").val(), 0);
                await fetchRoutes($("#pointsList").val(), $("#destinationPointsList").val(), 0);
                await fetchHotels($("#destinationCityList").val(), 0);
                await fetchExcursions($("#hotelsList").val());
                await fetchBackRoutes($("#pointsList").val(), $("#destinationPointsList").val(), 0);
                await fetchPrice($("#routesList").val(),
                    false,
                    $("#backRoutesList").val(),
                    false,
                    $("#hotelsList").val(),
                    false,
                    0,
                    0,
                    0,
                    0,
                    0,
                    $("#PeopleCount").val());
            }
        });
    </script>
}