@using TouristWebSite.Models
@model ConstructViewModel

<h2>Конструктор турів.</h2>
@Html.AntiForgeryToken()
<h4>Сконструюйте тур для себе.</h4>
<hr />

<h4>Точка відправлення:</h4>
@using (Html.BeginForm("TourConstruct", "Helper", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.Country, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Country, new SelectList(
                Model.Countries.Select(x => new { Value = x.Id, Text = x.Name }),
                "Value",
                "Text"
                ),
                new { @class = "form-control", @Id = "countryList" })
            @Html.ValidationMessageFor(m => m.Country, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.City, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.City, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "cityList" })
            @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Transport, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Transport, new SelectList(
                Model.Transports.Select(x => new { Value = x.Id, Text = x.Name }),
                "Value",
                "Text"
                ),
                new { @class = "form-control", @Id = "transportList" })
            @Html.ValidationMessageFor(m => m.Transport, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.LeavePoint, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.LeavePoint, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "pointsList" })
            @Html.ValidationMessageFor(m => m.LeavePoint, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h4>Пункт призначення:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.DestinationCountry, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.DestinationCountry, new SelectList(
                Model.DestinationCountries.Select(x => new { Value = x.Id, Text = x.Name }),
                "Value",
                "Text"
                ),
                new { @class = "form-control", @Id = "destinationCountryList" })
            @Html.ValidationMessageFor(m => m.DestinationCountry, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.DestinationCity, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.DestinationCity, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "destinationCityList" })
            @Html.ValidationMessageFor(m => m.DestinationCity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.DestinationPoint, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.DestinationPoint, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "destinationPointsList" })
            @Html.ValidationMessageFor(m => m.DestinationPoint, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h4>Маршрут подорожі:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.Route, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Route, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "routesList" })
            @Html.ValidationMessageFor(m => m.Route, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Class, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Class, new SelectList(new string[] { "Економ", "Бізнес" }), new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Class, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h4>Готель:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.Hotel, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Hotel, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "hotelsList" })
            @Html.ValidationMessageFor(m => m.Hotel, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.PeopleCount, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.PeopleCount, new { @class = "form-control", @type = "number", @id = "PeopleCount" })
            @Html.ValidationMessageFor(m => m.PeopleCount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.HotelClass, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.HotelClass, new SelectList(new string[] { "Стандарт", "Люкс" }), new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.HotelClass, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ExcursionsCount, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.TextBoxFor(m => m.ExcursionsCount, new { @class = "form-control", @type = "number", @oninput = "onchangeevent();", @id = "ExcursionsCount" })
            @Html.ValidationMessageFor(m => m.ExcursionsCount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="excurs1" style="display: none">
        @Html.LabelFor(m => m.Excursion1, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion1, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList1" })
            @Html.ValidationMessageFor(m => m.Excursion1, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="excurs2" style="display: none">
        @Html.LabelFor(m => m.Excursion2, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion2, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList2" })
            @Html.ValidationMessageFor(m => m.Excursion2, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="excurs3" style="display: none">
        @Html.LabelFor(m => m.Excursion3, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion3, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList3" })
            @Html.ValidationMessageFor(m => m.Excursion3, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="excurs4" style="display: none">
        @Html.LabelFor(m => m.Excursion4, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion4, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList4" })
            @Html.ValidationMessageFor(m => m.Excursion4, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" id="excurs5" style="display: none">
        @Html.LabelFor(m => m.Excursion5, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Excursion5, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "excursionsList5" })
            @Html.ValidationMessageFor(m => m.Excursion5, "", new { @class = "text-danger" })
        </div>
    </div>

    <hr />
    <h4>Маршрут зворотньої подорожі:</h4>

    <div class="form-group">
        @Html.LabelFor(m => m.BackRoute, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.BackRoute, Enumerable.Empty<SelectListItem>(), new { @class = "form-control", @Id = "backRoutesList" })
            @Html.ValidationMessageFor(m => m.BackRoute, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.BackClass, new { @class = "col-md-2 control-label" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.BackClass, new SelectList(new string[] { "Економ", "Бізнес" }), new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.BackClass, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-9">
            <button type="submit" class="btn btn-success"> <i class="fas fa-check"></i> Сконструювати </button>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var urlcities = '@Url.Action("GetCities", "Helper")';
        var urlpoints = '@Url.Action("GetLeavePoints", "Helper")';
        var urldestinationcities = '@Url.Action("GetDestinationCities", "Helper")';
        var urldestinationpoints = '@Url.Action("GetDestinationPoints", "Helper")';
        var urlroutes = '@Url.Action("GetRoutes", "Helper")';
        var urlhotels = '@Url.Action("GetHotels", "Helper")';
        var urlexcursions = '@Url.Action("GetExcursions", "Helper")';
        var urlbackroutes = '@Url.Action("GetBackRoutes", "Helper")';

        var cities = $('#cityList');
        var points = $('#pointsList');
        var destinationcities = $('#destinationCityList');
        var destinationpoints = $('#destinationPointsList');
        var routes = $('#routesList');
        var hotels = $('#hotelsList');
        var excursions1 = $('#excursionsList1');
        var excursions2 = $('#excursionsList2');
        var excursions3 = $('#excursionsList3');
        var excursions4 = $('#excursionsList4');
        var excursions5 = $('#excursionsList5');
        var backroutes = $('#backRoutesList');

       async function fetchCities(id) {
           await $.getJSON(urlcities, { id: id }, function(response) {
                cities.empty();

                $.each(response, function(index, item) {
                    cities.append($('<option value="'+ item.Id +'">' + item.Name + '</option>'));
                });
            });
        }

        async function fetchPoints(cityId, transportId) {
                await $.getJSON(urlpoints, { cityId: cityId, transportId: transportId }, function (response) {
                points.empty();

                $.each(response, function (index, item) {
                    points.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });
            });
        }

        async function fetchDestinationCities(id) {
            await $.getJSON(urldestinationcities, { id: id }, function(response) {
                destinationcities.empty();

                $.each(response, function(index, item) {
                    destinationcities.append($('<option value="'+ item.Id +'">' + item.Name + '</option>'));
                });
            });
        }

        async function fetchDestinationPoints(cityId, transportId) {
            await $.getJSON(urldestinationpoints, { cityId: cityId, transportId: transportId }, function (response) {
                destinationpoints.empty();

                $.each(response, function (index, item) {
                    destinationpoints.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });
            });
        }

        async function fetchRoutes(leavePointId, destinationPointId) {
            await $.getJSON(urlroutes, { leavePointId: leavePointId, destinationPointId: destinationPointId}, function (response) {
                routes.empty();

                $.each(response, function (index, item) {
                    routes.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });
            });
        }

        async function fetchHotels(destinationPointId) {
            await $.getJSON(urlhotels, { destinationPointId: destinationPointId }, function(response) {
                hotels.empty();

                $.each(response, function(index, item) {
                    hotels.append($('<option value="'+ item.Id +'">' + item.Name + '</option>'));
                });
            });
        }

        async function fetchExcursions(hotelId) {
            await $.getJSON(urlexcursions, { hotelId: hotelId }, function (response) {
                excursions1.empty();
                excursions2.empty();
                excursions3.empty();
                excursions4.empty();
                excursions5.empty();

                $.each(response, function (index, item) {
                    excursions1.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });

                $.each(response, function (index, item) {
                    excursions2.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });

                $.each(response, function (index, item) {
                    excursions3.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });

                $.each(response, function (index, item) {
                    excursions4.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });

                $.each(response, function (index, item) {
                    excursions5.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });
            });
        }

        async function fetchBackRoutes(leavePointId, destinationPointId) {
            await $.getJSON(urlbackroutes, { leavePointId: leavePointId, destinationPointId: destinationPointId}, function (response) {
                backroutes.empty();

                $.each(response, function (index, item) {
                    backroutes.append($('<option value="' + item.Id + '">' + item.Name + '</option>'));
                });
            });
        }

        function onchangeevent() {
            var count = document.getElementById("ExcursionsCount").value;
            console.log(count);
            switch (Number(count)) {
            case 0:
                    document.getElementById("excurs1").style.display = "none";
                    document.getElementById("excurs2").style.display = "none";
                    document.getElementById("excurs3").style.display = "none";
                    document.getElementById("excurs4").style.display = "none";
                    document.getElementById("excurs5").style.display = "none";
                break;
            case 1:
                    document.getElementById("excurs1").style.display = "block";
                    document.getElementById("excurs2").style.display = "none";
                    document.getElementById("excurs3").style.display = "none";
                    document.getElementById("excurs4").style.display = "none";
                    document.getElementById("excurs5").style.display = "none";
                break;
            case 2:
                    document.getElementById("excurs1").style.display = "block";
                    document.getElementById("excurs2").style.display = "block";
                    document.getElementById("excurs3").style.display = "none";
                    document.getElementById("excurs4").style.display = "none";
                    document.getElementById("excurs5").style.display = "none";
                break;
            case 3:
                    document.getElementById("excurs1").style.display = "block";
                    document.getElementById("excurs2").style.display = "block";
                    document.getElementById("excurs3").style.display = "block";
                    document.getElementById("excurs4").style.display = "none";
                    document.getElementById("excurs5").style.display = "none";
                break;
            case 4:
                    document.getElementById("excurs1").style.display = "block";
                    document.getElementById("excurs2").style.display = "block";
                    document.getElementById("excurs3").style.display = "block";
                    document.getElementById("excurs4").style.display = "block";
                    document.getElementById("excurs5").style.display = "none";
                break;
            case 5:
                    document.getElementById("excurs1").style.display = "block";
                    document.getElementById("excurs2").style.display = "block";
                    document.getElementById("excurs3").style.display = "block";
                    document.getElementById("excurs4").style.display = "block";
                    document.getElementById("excurs5").style.display = "block";
                break;
            default:
            }
        }

        $(document).ready(function() {
            $("#countryList").change(async function () {
                var id = $(this).val();
                await fetchCities(id);
                var idcity = $("#cityList").val();
                var idtransport = $("#transportList").val();
                await fetchPoints(idcity, idtransport);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint);
                await fetchBackRoutes(idPoint, idDestinationPoint);
                await fetchHotels(idDestinationPoint);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);   
            });

            $("#cityList").change(async function () {
                var id = $(this).val();
                var idtransport = $("#transportList").val();
                await fetchPoints(id, idtransport);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint);
                await fetchBackRoutes(idPoint, idDestinationPoint);
                await fetchHotels(idDestinationPoint);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);            
            });

            $("#transportList").change(async function () {
                var id = $(this).val();
                var idcity = $("#cityList").val();
                await fetchPoints(idcity, id);
                var idcitydest = $("#destinationCityList").val();
                await fetchDestinationPoints(idcitydest, id);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint);
                await fetchBackRoutes(idPoint, idDestinationPoint);
                await fetchHotels(idDestinationPoint);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);
            });

            $("#destinationCountryList").change(async function () {
                var id = $(this).val();
                await fetchDestinationCities(id);
                var idcity = $("#destinationCityList").val();
                var idtransport = $("#transportList").val();
                await fetchDestinationPoints(idcity, idtransport);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint);
                await fetchBackRoutes(idPoint, idDestinationPoint);
                await fetchHotels(idDestinationPoint);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);
            });

            $("#destinationCityList").change(async function () {
                var id = $(this).val();
                var idtransport = $("#transportList").val();
                await fetchDestinationPoints(id, idtransport);
                var idPoint = $("#pointsList").val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(idPoint, idDestinationPoint);
                await fetchBackRoutes(idPoint, idDestinationPoint);
                await fetchHotels(idDestinationPoint);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);
            });

            $("#pointsList").change(async function () {
                var id = $(this).val();
                var idDestinationPoint = $("#destinationPointsList").val();
                await fetchRoutes(id, idDestinationPoint);
                await fetchBackRoutes(id, idDestinationPoint);
                await fetchHotels(idDestinationPoint);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);
            });

            $("#destinationPointsList").change(async function () {
                var id = $(this).val();
                var idPoint = $("#pointsList").val();
                await fetchRoutes(idPoint, id);
                await fetchBackRoutes(idPoint, id);
                await fetchHotels(id);
                var idHotel = $("#hotelsList").val();
                await fetchExcursions(idHotel);
            });

            $("#hotelsList").change(async function() {
                var id = $(this).val();
                await fetchExcursions(id);
            });

            fetchCities(1);
            fetchPoints(1, 1);
            fetchDestinationCities(1);
            fetchDestinationPoints(1, 1);
            fetchRoutes(1, 1);
            fetchHotels(1);
            fetchExcursions(1);
            fetchBackRoutes(1, 1);
        });
    </script>
}